@{
    ViewData["Title"] = "Home Page";
}

<style>
    #main-container {
        display: flex;
        flex-direction: column;
        height: 99vh;
        padding: 0;
        margin: 0;
    }

    #map {
        flex: 1;
        width: 100%;
    }
</style>

<div class="container-fluid" id="main-container">
    <!-- Controls -->
    <div id="controls"
         class="row g-2 align-items-center p-2 bg-light border rounded shadow-sm">
        <div class="d-flex gap-3">
            <div class="col-auto">
                <select id="assetSelect" name="Asset"
                        class="form-select form-select-sm">
                    <option value="">-- Select Asset --</option>
                </select>
            </div>

            <div class="col-auto">
                <button class="btn btn-primary btn-sm">View Trace</button>
            </div>

            <div class="col-auto">
                <button class="btn btn-primary" id="btnOpenReplay">Replay</button>
            </div>

            <div class="col-auto">
                <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#viewAlarmModal">
                    <i class="bi bi-plus-circle"></i> Alarms
                </button>


            </div>
        </div>
    </div>
    <div id="map" class="mt-2"></div>
</div>


<!--  Map Replay Modal -->
<div class="modal fade" id="divMapReplayModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">View Replay</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="row g-3">
                    <div class="col-md-5">
                        <label for="startDateTime" class="form-label">Start DateTime</label>
                        <input type="text" id="startDateTime" class="form-control datetimepicker">
                    </div>
                    <div class="col-md-5">
                        <label for="endDateTime" class="form-label">End DateTime</label>
                        <input type="text" id="endDateTime" class="form-control datetimepicker">
                    </div>

                    <div class="col-md-2 mt-4">
                        <label for="btnReplayView" class="form-label">View</label>
                        <input type="button" id="btnReplayView" value="View Replays" class="btn btn-primary w-100" />
                    </div>


                </div>
                <div id="mapReplayModal" class="mt-3" style="height: 400px;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- View Alarms Modal -->
<div class="modal fade" id="viewAlarmModal" tabindex="-1" aria-labelledby="viewAlarmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewAlarmModalLabel">View Alarms</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3">
                    <div class="col-md-12">
                        <table id="alarmsTable" class="display" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Asset</th>
                                    <th>GpsDateTime</th>
                                    <th>Alarm</th>
                                    <th>Location</th>
                                    <th>Latitude</th>
                                    <th>Longitude</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>


<!-- Leaflet.js CSS & JS (Only for this page) -->
<!-- Flatpickr DateTime Picker -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://api1.tplmaps.com/js-api-v2/assets/tplmaps.js?api_key=$2a$10$RNdeMDBGrOwbnh81N3RzTDGUxKVId3cLscU3V3HkGdRLKhwI0oOQe"></script>
<script>
    var userMap;
    let replayMap;
    var ArrayOfStoreLastLocation = [];
    var ArrayOfmarker = [];
    var ArrayOfmarkerSimple = [];
    var ContactType;
    var FuelLastStatus = 0;
    var BatteryVoltageLastStatus = 0;
    var MapRefreshRate = 5000; // refresh every 5 seconds
    let replayMarkers = [];
    var ArrayOfmarker = [];
    var PolygonsArray = [];

    window.onload = function () {
        var mapOption = {
            lat: 30.37532100,
            lng: 69.34511599,
            zoom: 6,
            minZoom: 0,
            maxZoom: 20,
            divID: "map",
            gestureHandling: false
        };
        userMap = TPLMaps.map.initMap(mapOption);

        GetLL();

        $('#btnReplayView').on('click', function () {
            const asset = $('#assetSelect').val();
            const start = $('#startDateTime').val();
            const end = $('#endDateTime').val();
            var ArrayLatLng = [];
            if (!asset) {
                alert("Please select an asset.");
                return;
            }

            if (!start || !end) {
                alert("Please select both start and end datetime.");
                return;
            }
            const startDate = new Date(start);
            const endDate = new Date(end);
            if (startDate >= endDate) {
                alert("Start datetime must be before end datetime.");
                return;
            }

            $.get('@Url.Action("GetReplayData", "Tracking")', {
                asset: asset,
                startTime: start,
                endTime: end
            }, function (replayData) {
                if (!replayData || replayData.length === 0) {
                    alert("No replay data found for selected range.");
                    return;
                }
                else {
                    ClearPolygon(PolygonsArray);
                    for (var i = 0; i < replayData.length; i++) {
                        ArrayLatLng[i] = { "lat": replayData[i].latitude, "lng": replayData[i].longitude, "label": replayData[i].statusText };
                    }
                    addLine(ArrayLatLng, 'Green', '', asset);
                }
            })
            .fail(function () {
                    alert("Failed to load replay data.");
            });
        });

        function addLine(Area, Color, InfoWindowText, AssetNo) {
            var pointList = Area;// JSON.parse(Str1);
            var option = {
                style: {
                    weight: 3,
                    opacity: 0.7,
                    color: Color
                },
                points: pointList,
                map: replayMap
            };
            line = TPLMaps.overlays.line(option);
            PolygonsArray.push(line);
            replayMap.fitBounds(line.getBounds());
            TPLMaps.overlays.addToMap({
                geomObject: line,
                map: replayMap
            });
            var options = {
                geomObject: line,
                label: AssetNo
            }
            TPLMaps.overlays.addInfoPopUp(options);
            var options = {
                geomObject: line,
                label: InfoWindowText,
                sticky: true,
                opacity: 0.9,
                direction: 'auto',
                permanent: false,
            }
            TPLMaps.overlays.addLabel(options);
        } //end addLine

        function ClearPolygon(PolygonsArray) {
            if (PolygonsArray.length > 0) {
                var removePolygonOptions = {
                    map: replayMap,
                    polygonArray: PolygonsArray
                }
                TPLMaps.overlays.removePolygonFromMap(removePolygonOptions);
                PolygonsArray = [];
            }
            else
                PolygonsArray = [];
        }

    }; //On Load end


    function GetLL() {
        $.ajax({
            url: '@Url.Action("GetLL", "Home")',
            method: 'GET',
            success: function (data) {
                console.log(data);
                if (data != null) {
                    ClearMarkers(ArrayOfmarker);
                    for (var i = 0; i < data.length; i++) {
                        ArrayOfStoreLastLocation[i] = { "RegNo": data[i].asset.toUpperCase(), "Latitude": data[i].lat, "Longitude": data[i].lng };
                        addPoint(data[i].lat
                            , data[i].lng
                            , data[i].asset,
                            data[i].statusText.toLowerCase()
                            , "0"
                            , data[i].gpsdateTime,
                            data[i].region,
                            data[i].location,
                            data[i].speed,
                            data[i].color,
                        );
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error("Error: ", error);
            },
            complete: function () {
                setTimeout(GetLL, 30000);
            }
        });
    }

    function addPoint(Latitude, Longitude, Asset, StatusText, Direction, LastReportingDateTime, Region, Location, Speed, Color) {
        var basePath = '@(Url.Content("~/images/"))';
        var colorMap = {
            'Red#FF0000': 'path-red.png',
            'Maroon#800000': 'path-brown.png',
            'Yellow#FFFF00': 'path-yellow.png',
            'Olive#808000': 'path-olive.png',
            'Green#008000': 'path-green.png'
        };
        var ImagePath = basePath + (colorMap[Color] || 'path-blue.png');

        var StrInfoWindow = createInfo(Asset, LastReportingDateTime, Location, StatusText);
        var option = {
            lat: Latitude,
            lng: Longitude,
            icon: ImagePath,
            iconWidth: 18,
            iconHeight: 18,
            anchorWidth: 6,
            anchorHeight: 2,
            map: userMap
        };

        marker = TPLMaps.overlays.point(option);
        marker.Regno = Asset;
        ArrayOfmarker.push(marker);
        //userMap.setView(marker.getLatLng());
        var options = {
            map: userMap,
            geomObject: marker
        }
        TPLMaps.overlays.addToMap(options);
        var options = {
            geomObject: marker,
            label: StrInfoWindow,
            sticky: false
        }
        TPLMaps.overlays.addInfoPopUp(options);
        var StrMarkerWithLabel = '<span style="font-size: 12px;" >' + Asset + '</span>';

        var options = {
            geomObject: marker,
            label: StrMarkerWithLabel,
            sticky: false,
            opacity: 0.9,
            //direction: 'auto',
            permanent: true
        }
        TPLMaps.overlays.addLabel(options);
    }//end add point

    function createInfo(Asset, LastReportingDateTime, Location, StatusText) {
        return '<div  style="font-size: 12px;"><h4>' + Asset + '</h4><span><b>Location:</b> ' + Location + '</span></br><span><b>Reporting:</b></span>' + LastReportingDateTime + '</br><span ><b>Status:</b></span>' + StatusText + '</div>';
    }

    const SetZoomCenter = function ZoomCenter(Latitude, Longitude, Zoom) {
        if (Zoom == undefined) {
            Zoom = 12;
        }
        var options = {
            zoom: Zoom,
            lat: Latitude,
            lng: Longitude,
            map: userMap
        };
        TPLMaps.map.setCenterZoom(options);
    }

    function ClearMarkers(ArrayOfmarker) {
        if (ArrayOfmarker.length > 0) {
            var removeMarkerOptions = {
                map: userMap,
                markerArray: ArrayOfmarker
            }
            TPLMaps.overlays.removeMarkersFromMap(removeMarkerOptions);
            ArrayOfmarker.length = 0;
        }
    }

</script>

@section Scripts {
    <script>
        $(document).ready(function () {
            flatpickr(".datetimepicker", {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
            });

            $('#assetSelect').select2({
                placeholder: "Select an Asset",
                allowClear: true,
                width: '100%'
            });
            $.get('@Url.Action("GetAsset", "Permissions")', {}, function (data) {
                var $select = $('#assetSelect');
                data.data.forEach(function (u) {
                    $select.append('<option value="' + u.asset + '">' + u.asset + '</option>');
                });
                $select.trigger('change.select2');
            });

            $('#assetSelect').change(function () {
                var AssetId = $(this).val();
                var obj = ArrayOfStoreLastLocation.find(x => x.RegNo === AssetId);
                if (obj != null && obj.RegNo != "") {
                    SetZoomCenter(obj.Latitude, obj.Longitude, 20);
                }
            });

            $('#btnOpenReplay').on('click', function () {
                const selectedAsset = $('#assetSelect').val();
                if (!selectedAsset) {
                    alert('Please select an asset before opening the replay.');
                    return;
                }
                const modal = new bootstrap.Modal(document.getElementById('divMapReplayModal'));
                modal.show();
            });


            $('#divMapReplayModal').on('shown.bs.modal', function () {
                if (!replayMap) {
                    const options = {
                        lat: 30.3753,
                        lng: 69.3451,
                        zoom: 6,
                        minZoom: 0,
                        maxZoom: 20,
                        divID: "mapReplayModal",
                        gestureHandling: false
                    };
                    replayMap = TPLMaps.map.initMap(options);
                } else {
                    replayMap.invalidateSize();
                }
            });

            $('#viewAlarmModal').on('shown.bs.modal', function () {
                if (!$.fn.DataTable.isDataTable('#alarmsTable')) {
                    $('#alarmsTable').DataTable({
                        "ajax": {
                            "url": '@Url.Action("GetVTAlarms", "Tracking")',//       "/Permissions/GetUsers",
                            "type": "GET",
                            "datatype": "json"
                        },
                        columns: [
                            { data: 'asset' },
                            { data: 'gpsDateTime' },
                            { data: 'alarm' },
                            { data: 'location' },
                            { data: 'latitude' },
                            { data: 'longitude' }
                        ]
                    });
                }
            });
        });
    </script>

}
